<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Performance on Muhammad Hassan Raza</title><link>https://mhassan.dev/tags/performance/</link><description>Recent content in Performance on Muhammad Hassan Raza</description><generator>Hugo -- 0.144.0</generator><language>en-us</language><lastBuildDate>Mon, 17 Feb 2025 12:00:00 +0500</lastBuildDate><atom:link href="https://mhassan.dev/tags/performance/index.xml" rel="self" type="application/rss+xml"/><item><title>Optimizing Django ORM Queries for Large Applications</title><link>https://mhassan.dev/blog/django-orm-optimizaitons/</link><pubDate>Mon, 17 Feb 2025 12:00:00 +0500</pubDate><guid>https://mhassan.dev/blog/django-orm-optimizaitons/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>As my POS system scaled, performance bottlenecks became increasingly apparent. Customers began complaining about slow bill generation times, which made checkout frustratingly sluggish. After profiling my Django APIs, I discovered that inefficient ORM queries were causing unnecessary database overhead, leading to significant slowdowns. This prompted a deep dive into ORM optimizations to reduce query execution time and improve the overall user experience.&lt;/p>
&lt;p>In this post, I&amp;rsquo;ll share how I optimized my Django ORM queries using &lt;code>select_related&lt;/code>, &lt;code>prefetch_related&lt;/code>, bulk operations, and query profiling tools to enhance the efficiency of my refund API and bill generation process.&lt;/p></description></item><item><title>Optimizing Django Signals for Efficient Ledger Recalculations</title><link>https://mhassan.dev/blog/using-signals-optimally/</link><pubDate>Sat, 15 Feb 2025 12:00:00 +0500</pubDate><guid>https://mhassan.dev/blog/using-signals-optimally/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>When dealing with financial transactions in Django applications, maintaining an accurate ledger is critical. However, inefficient signal handling can lead to performance bottlenecks. In this article, we&amp;rsquo;ll explore an optimized approach to recalculating ledger balances while ensuring minimal database impact.&lt;/p>
&lt;h2 id="the-problem">The Problem&lt;/h2>
&lt;p>A typical ledger system requires recalculating balances when transactions are inserted, updated, or deleted. Using Django signals, many implementations trigger redundant recalculations, causing excessive database queries and slowing down the application.&lt;/p></description></item><item><title>Advantages of Preloading Data on Page Load</title><link>https://mhassan.dev/blog/preloading-data-for-performance/</link><pubDate>Tue, 11 Feb 2025 00:00:00 +0000</pubDate><guid>https://mhassan.dev/blog/preloading-data-for-performance/</guid><description>Discover how preloading data on page load enhances performance and improves user experience, particularly for pages like the generate invoice page where product data is loaded on mount.</description></item></channel></rss>