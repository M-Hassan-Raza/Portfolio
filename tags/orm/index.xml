<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>ORM on Muhammad Hassan Raza</title><link>https://mhassan.dev/tags/orm/</link><description>Recent content in ORM on Muhammad Hassan Raza</description><generator>Hugo -- 0.143.1</generator><language>en-us</language><lastBuildDate>Mon, 17 Feb 2025 12:00:00 +0500</lastBuildDate><atom:link href="https://mhassan.dev/tags/orm/index.xml" rel="self" type="application/rss+xml"/><item><title>Optimizing Django ORM Queries for Large Applications</title><link>https://mhassan.dev/blog/django-orm-optimizaitons/</link><pubDate>Mon, 17 Feb 2025 12:00:00 +0500</pubDate><guid>https://mhassan.dev/blog/django-orm-optimizaitons/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>As my POS system scaled, performance bottlenecks became increasingly apparent. Customers began complaining about slow bill generation times, which made checkout frustratingly sluggish. After profiling my Django APIs, I discovered that inefficient ORM queries were causing unnecessary database overhead, leading to significant slowdowns. This prompted a deep dive into ORM optimizations to reduce query execution time and improve the overall user experience.&lt;/p>
&lt;p>In this post, I&amp;rsquo;ll share how I optimized my Django ORM queries using &lt;code>select_related&lt;/code>, &lt;code>prefetch_related&lt;/code>, bulk operations, and query profiling tools to enhance the efficiency of my refund API and bill generation process.&lt;/p></description></item></channel></rss>