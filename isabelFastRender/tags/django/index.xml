<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Django on Muhammad Hassan Raza</title>
    <link>http://localhost:1313/tags/django/</link>
    <description>Recent content in Django on Muhammad Hassan Raza</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 17 Feb 2025 12:00:00 +0500</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/django/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Optimizing Django ORM Queries for Large Applications</title>
      <link>http://localhost:1313/blog/django-orm-optimizaitons/</link>
      <pubDate>Mon, 17 Feb 2025 12:00:00 +0500</pubDate>
      <guid>http://localhost:1313/blog/django-orm-optimizaitons/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;As my POS system scaled, performance bottlenecks became increasingly apparent. Customers began complaining about slow bill generation times, which made checkout frustratingly sluggish. After profiling my Django APIs, I discovered that inefficient ORM queries were causing unnecessary database overhead, leading to significant slowdowns. This prompted a deep dive into ORM optimizations to reduce query execution time and improve the overall user experience.&lt;/p&gt;
&lt;p&gt;In this post, I&amp;rsquo;ll share how I optimized my Django ORM queries using &lt;code&gt;select_related&lt;/code&gt;, &lt;code&gt;prefetch_related&lt;/code&gt;, bulk operations, and query profiling tools to enhance the efficiency of my refund API and bill generation process.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Obfuscating Images with Django &amp; Azure Cloud Storage</title>
      <link>http://localhost:1313/projects/pixelcryptor/</link>
      <pubDate>Sun, 16 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/pixelcryptor/</guid>
      <description>A deep dive into my Django project that obfuscates images by embedding executable files and storing them securely on Azure Blob Storage.</description>
    </item>
    <item>
      <title>Optimizing Django Signals for Efficient Ledger Recalculations</title>
      <link>http://localhost:1313/blog/using-signals-optimally/</link>
      <pubDate>Sat, 15 Feb 2025 12:00:00 +0500</pubDate>
      <guid>http://localhost:1313/blog/using-signals-optimally/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;When dealing with financial transactions in Django applications, maintaining an accurate ledger is critical. However, inefficient signal handling can lead to performance bottlenecks. In this article, we&amp;rsquo;ll explore an optimized approach to recalculating ledger balances while ensuring minimal database impact.&lt;/p&gt;
&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;
&lt;p&gt;A typical ledger system requires recalculating balances when transactions are inserted, updated, or deleted. Using Django signals, many implementations trigger redundant recalculations, causing excessive database queries and slowing down the application.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
